@layout('layouts/master')
@section('content')
<div class="container">
    <h1 class="title">Plays</h1>
    <div class="container">
        <form action={{ 'play/createNew' }} method="POST">
            {{ csrfField() }}
            <button type="submit" class='button is-primary'>Nouvelle pièce</button>
        </form>
    </div>
    @if(plays.length>0)
        <div class="columns is-multiline is-variable is-1-mobile is-1-tablet is-2-desktop is-6-widescreen" style="text-align: -webkit-center;">
            @each((play,index) in plays)

                @include('partials/playPanel')
                
            @endeach
        </div>       
    @else       
        <p>Pas encore de pièce de théâtre</p>  
    @endif
</div>
<div class="csrfTokenElement" data-csrf-token="{{ csrfToken }}"></div>
<script>
    const CSRF_TOKEN = document.getElementsByName("_csrf")[0].value;
    const deleteButtons = Array.from(document.getElementsByClassName("delete"));
    const fileInputs = Array.from(document.querySelectorAll("[id^='file_']"));
    fileInputs.map((elem) => {
        elem.addEventListener("change", (e) => {
            const fileInput = e.target;
            const entityType = fileInput.getAttribute("data-type")
            const entityId = fileInput.getAttribute("data-id");
            const file = fileInput.files[0];
            console.log(file)
            console.log(`Here's the entity_id to upload: ${entityId}`);
            const form = new FormData();
            const reader = new FileReader();
            reader.addEventListener('load', event => {
                const buffer = event.target.result;
                const blob = new Blob([buffer], {type: file.type});
                form.append("image", blob);
                form.append("entityId", entityId);
                form.append("entityType", entityType);
                fetch(`${window.location.origin}/images`, {
                    method: "POST",
                    headers: {
                        'X-CSRF-Token': CSRF_TOKEN,
                        /* 'Accept': `${blob.type}`, // FIXME: Not working while file transfer?
                        'Content-Type': `${blob.type}`,*/ 
                        'Content-Transfer-Encoding': 'base64'
                    },
                    mode: "cors",
                    body: form
                }).then(response => {
                    if (!response.ok) throw response;
                    return response.json();
                }).then((data) => {
                    console.info(data);
                    window.location.reload();
                }).catch((err) => {
                    console.error(err);
                })
            });
            reader.readAsArrayBuffer(file);
            
        })
    })
    deleteButtons.map((elem) => {
        elem.addEventListener("click", (e) => {
            const id = e.target.getAttribute("data-image-id");
            fetch(`${window.location.origin}/images/${id}`, {
                method: "DELETE",
                headers: {
                    "X-CSRF-Token": CSRF_TOKEN
                }
            }).then(response => {
                if (!response.ok) throw response;
                return response.json();
            }).then((data) => {
                console.info(data);
                window.location.reload()
            }).catch((err) => {
                console.error(err);
            })
        })
    })
    function delete_scene(scene_id)
    {
        const token = $('.csrfTokenElement').data('csrf-token');
        const params = { 
            sceneId: scene_id, 
            _csrf: token
        };
        $.post('/api/scene/delete',params,(resp)=>{
            $("#scene_item_"+scene_id).remove();
            }   
        );
    }
    function toggle_scene_display(scene_id)
    {
        $("#scene_item_"+scene_id+" .scene_item_display").toggle();
        $("#scene_item_"+scene_id+" .scene_item_edit").toggle();  
        $("#scene_item_"+scene_id+" .scene_item_edit input").focus();      
    }
    function toggle_play_display(play_id)
    {
        $("#play_item_"+play_id+" .play_item_display").toggle();
        $("#play_item_"+play_id+" .play_item_edit").toggle();  
        $("#play_item_"+play_id+" .play_item_edit input").focus();      
    }
    function update_scene_name(scene_id)
    {   
        const newSceneName=$("#scene_item_"+scene_id+" .scene_item_edit input").val();
        $("#scene_item_"+scene_id+" .scene_item_display .scene_name").text(newSceneName);
        const token = $('.csrfTokenElement').data('csrf-token');
        const params = { 
            newSceneName: newSceneName, 
            _csrf: token
        };
        $.post('/api/scene/'+scene_id+'/updateName',params,(resp)=>console.log(resp));
    }
    function update_play_name(play_id)
    {   
        const newPlayName=$("#play_item_"+play_id+" .play_item_edit input").val();
        $("#play_item_"+play_id+" .play_item_edit input").focus();
        $("#play_item_"+play_id+" .play_item_display .play_name").text(newPlayName);
        const token = $('.csrfTokenElement').data('csrf-token');
        const params = { 
            newPlayName: newPlayName, 
            _csrf: token
        };
        $.post('/api/play/'+play_id+'/updateName',params,(resp)=>console.log(resp));
    }
</script>
@endsection