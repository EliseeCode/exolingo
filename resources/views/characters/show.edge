@layout('layouts/master')

@section('content')
   
  
    <section class="hero is-fullheight">
      
      <div class="hero-body">
        <div class="container">
          <div class="columns is-centered">
              <div class="card" style="min-width:50%;">
                <div class="card-image">
                    <figure class="image is-vcentered m-1" style="background-color:lightgrey;">                          
                        @if(character.image)  
                        <img src="{{character?.image?.publicPath}}" style="border-radius: 1%;" alt="Placeholder image for {{character?.id}}">
                        <button class="delete deleteImage is-large is-danger" data-image-id="{{character?.image?.id}}" style="z-index: 100;"></button>
                        @else
                        <input id="file_{{character.id}}" type="file" data-type="{{objectType.CHARACTER}}" data-id="{{character.id}}" hidden/>
                        <label for="file_{{character.id}}" class="is-success has-text-centered button btnUpload is-primary is-fullwidth" >Select file</label>
                        @end
                    </figure>
                </div>
                <div class="card-content">
                    <p class="title is-4">{{character.name}}</p>
                    <p class="title is-6">{{character.gender}}</p>
                    <ul>
                        @each(play in plays)
                        <li>
                            {{play.name}}
                        </li>                       
                        @endeach
                    </ul>
                </div>
                <footer class="card-footer">
                  <a href="#" class="card-footer-item">Edit</a>
                </footer>
              </div>
            </div>
        </div>
      </div>
      <div id="csrfTokenElement" data-csrf-token="{{ csrfToken }}"></div>
    </section>
  
  <script>

const CSRF_TOKEN = document.getElementById("csrfTokenElement").dataset.csrfToken;
    const deleteButtons = Array.from(document.getElementsByClassName("deleteImage"));
    const fileInputs = Array.from(document.querySelectorAll("[id^='file_']"));
    fileInputs.map((elem) => {
        elem.addEventListener("change", (e) => {
            const fileInput = e.target;
            const entityType = fileInput.getAttribute("data-type")
            const entityId = fileInput.getAttribute("data-id");
            const file = fileInput.files[0];
            console.log("entityType"+entityType);
            console.log(`Here's the entity_id to upload: ${entityId}`);
            const form = new FormData();
            const reader = new FileReader();
            reader.addEventListener('load', event => {
                const buffer = event.target.result;
                const blob = new Blob([buffer], {type: file.type});
                form.append("image", blob);
                form.append("entityId", entityId);
                form.append("entityType", entityType);
                fetch(`${window.location.origin}/images`, {
                    method: "POST",
                    headers: {
                        'X-CSRF-Token': CSRF_TOKEN,
                        /* 'Accept': `${blob.type}`, // FIXME: Not working while file transfer?
                        'Content-Type': `${blob.type}`,*/ 
                        'Content-Transfer-Encoding': 'base64'
                    },
                    mode: "cors",
                    body: form
                }).then(response => {
                    if (!response.ok) throw response;
                    return response.json();
                }).then((data) => {
                    console.info(data);
                    window.location.reload();
                }).catch((err) => {
                    console.error(err);
                })
            });
            reader.readAsArrayBuffer(file);
            
        })
    })
    deleteButtons.map((elem) => {
        elem.addEventListener("click", (e) => {
            const id = e.target.getAttribute("data-image-id");
            fetch(`${window.location.origin}/images/${id}`, {
                method: "DELETE",
                headers: {
                    "X-CSRF-Token": CSRF_TOKEN
                }
            }).then(response => {
                if (!response.ok) throw response;
                return response.json();
            }).then((data) => {
                console.info(data);
                window.location.reload()
            }).catch((err) => {
                console.error(err);
            })
        })
    })
  </script>
@endsection